// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	proto/api.proto

It has these top-level messages:
	AuthRequest
	AuthReply
	RegisterRequest
	RegisterReply
	EventsRequest
	Event
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthRequest struct {
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthReply struct {
}

func (m *AuthReply) Reset()                    { *m = AuthReply{} }
func (m *AuthReply) String() string            { return proto.CompactTextString(m) }
func (*AuthReply) ProtoMessage()               {}
func (*AuthReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RegisterRequest struct {
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RegisterReply struct {
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EventsRequest struct {
}

func (m *EventsRequest) Reset()                    { *m = EventsRequest{} }
func (m *EventsRequest) String() string            { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()               {}
func (*EventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Event struct {
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*AuthRequest)(nil), "api.AuthRequest")
	proto.RegisterType((*AuthReply)(nil), "api.AuthReply")
	proto.RegisterType((*RegisterRequest)(nil), "api.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "api.RegisterReply")
	proto.RegisterType((*EventsRequest)(nil), "api.EventsRequest")
	proto.RegisterType((*Event)(nil), "api.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIService service

type APIServiceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (APIService_EventsClient, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := grpc.Invoke(ctx, "/api.APIService/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/api.APIService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (APIService_EventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_APIService_serviceDesc.Streams[0], c.cc, "/api.APIService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type aPIServiceEventsClient struct {
	grpc.ClientStream
}

func (x *aPIServiceEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for APIService service

type APIServiceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Events(*EventsRequest, APIService_EventsServer) error
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.APIService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).Events(m, &aPIServiceEventsServer{stream})
}

type APIService_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type aPIServiceEventsServer struct {
	grpc.ServerStream
}

func (x *aPIServiceEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _APIService_Auth_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _APIService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _APIService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}

func init() { proto.RegisterFile("proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0x85, 0x30,
	0x14, 0x86, 0x73, 0xa3, 0x5e, 0xf5, 0x10, 0xac, 0x36, 0x4e, 0x8c, 0x4c, 0xc6, 0x04, 0x6a, 0xd4,
	0x17, 0xc0, 0xc4, 0xc1, 0xcd, 0xe0, 0xe6, 0x56, 0xf0, 0x04, 0x9a, 0x00, 0xad, 0x6d, 0x69, 0xc2,
	0x9b, 0xf8, 0xb8, 0xa6, 0x25, 0x08, 0xb2, 0x9d, 0x7e, 0xff, 0x69, 0xff, 0x2f, 0x05, 0xa2, 0xb4,
	0xb4, 0x92, 0x71, 0x25, 0xf2, 0x30, 0xd1, 0x13, 0xae, 0x44, 0x1a, 0x43, 0x54, 0x8c, 0xb6, 0x2d,
	0xf1, 0x7b, 0x44, 0x63, 0xd3, 0x08, 0x2e, 0xe7, 0xa3, 0xea, 0xa6, 0xf4, 0x06, 0x48, 0x89, 0x8d,
	0x30, 0x16, 0xf5, 0x92, 0x13, 0x88, 0x57, 0xe4, 0x77, 0x08, 0xc4, 0xaf, 0x0e, 0x07, 0x6b, 0x96,
	0x8d, 0x73, 0x38, 0x0b, 0xe0, 0xf1, 0xe7, 0x00, 0x50, 0xbc, 0xbf, 0x7d, 0xa0, 0x76, 0xa2, 0x46,
	0x7a, 0x07, 0xa7, 0xfe, 0x65, 0x7a, 0x9d, 0x7b, 0x83, 0x4d, 0x67, 0x72, 0xb5, 0x21, 0xaa, 0x9b,
	0xe8, 0x33, 0x5c, 0x2c, 0x1d, 0xf4, 0x36, 0x64, 0x3b, 0x8b, 0x84, 0xee, 0xa8, 0xbf, 0x75, 0x0f,
	0xc7, 0x59, 0x84, 0xce, 0xe9, 0x3f, 0xab, 0x04, 0x56, 0xf6, 0x70, 0x78, 0x61, 0x9f, 0x59, 0x23,
	0x6c, 0x3b, 0x56, 0x79, 0x2d, 0x7b, 0xd6, 0x4b, 0x87, 0x3d, 0x7e, 0x89, 0x9a, 0x77, 0xcc, 0xa0,
	0x76, 0xa8, 0x33, 0xde, 0xe0, 0x60, 0xd9, 0xdf, 0x87, 0x55, 0xc7, 0x30, 0x3e, 0xfd, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x16, 0xfe, 0x87, 0xb3, 0x44, 0x01, 0x00, 0x00,
}
