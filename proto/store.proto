syntax = "proto3";

package store;

option go_package = "github.com/genzai-io/sliced/proto/store";

option java_package = "io.genzai.sliced.model.store";
//option java_outer_classname = "Store";
option java_multiple_files = true;


message MessageType {

}

message RecordID {
    uint64 epoch = 1;
    uint64 seq = 2;
}

message Record {
    Projection key = 1;
    Projection slice = 2;
}

message Projection {
    repeated Field fields = 1;

    message Field {
        int32 id = 1;
        string name = 2;
        bool desc = 3;
        int32 type = 4;
    }
}

message Index {
    int64 id = 1;
    string name = 2;
    int64 topicID = 3;
    Type type = 4;
    uint64 created = 5;

    Projection projection = 10;

    enum Type {
        BTREE = 0;
        PREFIX = 2;
        RTREE = 3;
        FULLTEXT = 1;
    }
}

// Low level append-only log of user-defined records.
message Topic {
    string schema = 15;

    int64 id = 1;
    string name = 2;
    // Slot to default to if sliceKey isn't set
    uint32 slot = 3;
    string type = 12;
    sint64 queueID = 5;
    string rollerID = 6;
    Mode mode = 7;

    int32 writeSpeed = 8;

    // A "Keyed" topic (Primary Key) turns a topic into a table
    Projection key = 10;

    // The key projection used to determines how to choose the right
    // slice / "shard" / "partition" based on a single record
    Projection sliceKey = 11;

    // Recommended Drive type
    //    Drive.Kind drive = 12;

    enum Mode {
        // Topic is used as a "Log"
        LOG = 0;
        // Topic is used as a "Job Queue"
        QUEUE = 1;
        // Tables allow for updates based on a specified "key"
        TABLE = 2;
    }
}

// Definition of a roller which decides when to create new segment files.
message Roller {
    uint64 id = 1;
    string name = 2;
    uint64 minBytes = 3;
    uint64 minAge = 4;
    uint64 minCount = 5;
    uint64 maxBytes = 6;
    uint64 maxAge = 7;
    uint64 maxCount = 8;
}

message Path {
    // Name of file
    // This is a path string scoped under a volume
    // /volume/drive
    string name = 1;
    // Volume ID
    string volumeID = 2;
    // Drive
    string drive = 3;
    // Flag whether file is local
    bool local = 4;
    // Flag whether file is in a remote bucket
    bool bucket = 5;

    enum Type {
        Local = 0;
        Bucket = 1;
    }
}

message Hash {
    string algorithm = 1;
    bytes value = 2;

    enum Algorithm {
        CRC32 = 0;
    }
}

// An appender will eventually seal it's current file
// and start appending to a brand new file. These files
// are called "Segments".
message Segment {
    // Sequence of the segment within a topic
    uint64 id = 1;
    // ID of the stream
    sint64 topicID = 2;
    // Slice that owns the segment
    int32 slice = 3;
    // Location of file
    Path path = 4;
    // Header
    SegmentHeader header = 5;
    // Stats of a single segment
    SegmentStats stats = 6;
}

message SegmentStats {
    // Hash of the entire contents of the file
    Hash hash = 1;
    // Number of records
    uint64 count = 2;
    // Cumulative size of all headers in bytes
    uint64 header = 3;
    // Cumulative size of all bodies in bytes
    uint64 body = 4;
    // Size of entire file in bytes
    int64 size = 5;
    // The size in bytes of the largest body
    uint32 maxBody = 6;
    // First record
    RecordPointer first = 7;
    // Last record
    RecordPointer last = 8;
}

message SegmentHeader {
    uint64 timestamp = 1;
    sint64 topicID = 2;
    uint64 logID = 3;
    int64 startIndex = 4;
}

message RecordDelete {
    RecordPointer location = 1;
}

message GlobalID {
    int64 id = 1;
    int32 slot = 2;
    RecordID recID = 3;
}

message RecordPointer {
    RecordID id = 1;
    // Position of first byte of the body
    int64 pos = 2;
    int32 size = 3;
}

// Queue or Message Queue is a higher level construct that manage the
// lifecycle of a Job queue. 3 topics are constructed.
message Queue {
    uint64 id = 1;
    string name = 2;
    uint64 requestID = 3;
    // ACK stream ID
    uint64 replyID = 4;
    // ERR or Dead-Letter stream
    uint64 errorID = 5;
    // Management level
    Level level = 6;
    // Fifo order
    bool fifo = 10;
    uint64 maxInflight = 11;
    uint64 maxVisibility = 12;
    uint64 maxDelay = 13;
    uint32 maxRetries = 14;
    string appID = 15;

    repeated string tags = 16;
}

message Job {
    RecordID id = 1;
    uint64 deadline = 4;
    bytes message = 5;
}

message Ack {
    string id = 1;
    Code code = 2;

    enum Code {
        SUCCESS = 0;
        TIMED_OUT = 1;
        FATAL = 2;
    }
}

message Daemon {
    uint64 id = 1;
    string name = 2;
    Level level = 3;
}
