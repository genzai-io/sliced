/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.store_pb.AddNodeToGroup', null, global);
goog.exportSymbol('proto.store_pb.App', null, global);
goog.exportSymbol('proto.store_pb.Bucket', null, global);
goog.exportSymbol('proto.store_pb.Bucket.API', null, global);
goog.exportSymbol('proto.store_pb.Codec', null, global);
goog.exportSymbol('proto.store_pb.CreateDatabaseReply', null, global);
goog.exportSymbol('proto.store_pb.CreateDatabaseRequest', null, global);
goog.exportSymbol('proto.store_pb.Daemon', null, global);
goog.exportSymbol('proto.store_pb.Database', null, global);
goog.exportSymbol('proto.store_pb.Drive', null, global);
goog.exportSymbol('proto.store_pb.Drive.Kind', null, global);
goog.exportSymbol('proto.store_pb.DriveStats', null, global);
goog.exportSymbol('proto.store_pb.GlobalID', null, global);
goog.exportSymbol('proto.store_pb.Hash', null, global);
goog.exportSymbol('proto.store_pb.Hash.Algorithm', null, global);
goog.exportSymbol('proto.store_pb.Index', null, global);
goog.exportSymbol('proto.store_pb.Index.Type', null, global);
goog.exportSymbol('proto.store_pb.InitNode', null, global);
goog.exportSymbol('proto.store_pb.Level', null, global);
goog.exportSymbol('proto.store_pb.Node', null, global);
goog.exportSymbol('proto.store_pb.NodeGroup', null, global);
goog.exportSymbol('proto.store_pb.NodeGroup.Member', null, global);
goog.exportSymbol('proto.store_pb.Path', null, global);
goog.exportSymbol('proto.store_pb.Path.Type', null, global);
goog.exportSymbol('proto.store_pb.Projection', null, global);
goog.exportSymbol('proto.store_pb.Projection.Field', null, global);
goog.exportSymbol('proto.store_pb.Queue', null, global);
goog.exportSymbol('proto.store_pb.RaftMember', null, global);
goog.exportSymbol('proto.store_pb.RaftStatus', null, global);
goog.exportSymbol('proto.store_pb.Rebalance', null, global);
goog.exportSymbol('proto.store_pb.Rebalance.Task', null, global);
goog.exportSymbol('proto.store_pb.Record', null, global);
goog.exportSymbol('proto.store_pb.RecordID', null, global);
goog.exportSymbol('proto.store_pb.RecordPointer', null, global);
goog.exportSymbol('proto.store_pb.Ring', null, global);
goog.exportSymbol('proto.store_pb.Roller', null, global);
goog.exportSymbol('proto.store_pb.Segment', null, global);
goog.exportSymbol('proto.store_pb.SegmentHeader', null, global);
goog.exportSymbol('proto.store_pb.SegmentStats', null, global);
goog.exportSymbol('proto.store_pb.Slice', null, global);
goog.exportSymbol('proto.store_pb.SliceID', null, global);
goog.exportSymbol('proto.store_pb.SliceNode', null, global);
goog.exportSymbol('proto.store_pb.SlotRange', null, global);
goog.exportSymbol('proto.store_pb.Suffrage', null, global);
goog.exportSymbol('proto.store_pb.Topic', null, global);
goog.exportSymbol('proto.store_pb.Topic.Mode', null, global);
goog.exportSymbol('proto.store_pb.Topic.Type', null, global);
goog.exportSymbol('proto.store_pb.TxChangeRing', null, global);
goog.exportSymbol('proto.store_pb.TxChangeRingCancel', null, global);
goog.exportSymbol('proto.store_pb.TxCreateQueue', null, global);
goog.exportSymbol('proto.store_pb.TxCreateSegment', null, global);
goog.exportSymbol('proto.store_pb.TxCreateTopic', null, global);
goog.exportSymbol('proto.store_pb.TxDeleteTopic', null, global);
goog.exportSymbol('proto.store_pb.TxRoll', null, global);
goog.exportSymbol('proto.store_pb.TxSplitTopic', null, global);
goog.exportSymbol('proto.store_pb.Worker', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.App.repeatedFields_, null);
};
goog.inherits(proto.store_pb.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.App.displayName = 'proto.store_pb.App';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.App.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.App.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    versionsList: jspb.Message.getRepeatedField(msg, 9),
    tagsList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.App}
 */
proto.store_pb.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.App;
  return proto.store_pb.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.App}
 */
proto.store_pb.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.store_pb.App.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.App.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.App.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.App.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.store_pb.App.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.App.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string versions = 9;
 * @return {!Array.<string>}
 */
proto.store_pb.App.prototype.getVersionsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<string>} value */
proto.store_pb.App.prototype.setVersionsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.store_pb.App.prototype.addVersions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.store_pb.App.prototype.clearVersionsList = function() {
  this.setVersionsList([]);
};


/**
 * repeated string tags = 10;
 * @return {!Array.<string>}
 */
proto.store_pb.App.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<string>} value */
proto.store_pb.App.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.store_pb.App.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.store_pb.App.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Worker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Worker.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Worker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Worker.displayName = 'proto.store_pb.Worker';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Worker.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Worker.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Worker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Worker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Worker.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    memory: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cpus: jspb.Message.getFieldWithDefault(msg, 6, 0),
    queuesList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Worker}
 */
proto.store_pb.Worker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Worker;
  return proto.store_pb.Worker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Worker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Worker}
 */
proto.store_pb.Worker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMemory(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCpus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addQueues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Worker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Worker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Worker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Worker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMemory();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCpus();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getQueuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.store_pb.Worker.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Worker.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.store_pb.Worker.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Worker.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.store_pb.Worker.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.Worker.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 memory = 5;
 * @return {number}
 */
proto.store_pb.Worker.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.Worker.prototype.setMemory = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 cpus = 6;
 * @return {number}
 */
proto.store_pb.Worker.prototype.getCpus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.store_pb.Worker.prototype.setCpus = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string queues = 10;
 * @return {!Array.<string>}
 */
proto.store_pb.Worker.prototype.getQueuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<string>} value */
proto.store_pb.Worker.prototype.setQueuesList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.store_pb.Worker.prototype.addQueues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.store_pb.Worker.prototype.clearQueuesList = function() {
  this.setQueuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Node.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Node.displayName = 'proto.store_pb.Node';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Node.repeatedFields_ = [24];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    instanceid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    region: jspb.Message.getFieldWithDefault(msg, 7, ""),
    zone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    cores: jspb.Message.getFieldWithDefault(msg, 9, 0),
    memory: jspb.Message.getFieldWithDefault(msg, 10, 0),
    os: jspb.Message.getFieldWithDefault(msg, 50, ""),
    arch: jspb.Message.getFieldWithDefault(msg, 51, ""),
    cpuspeed: jspb.Message.getFieldWithDefault(msg, 52, 0),
    bootstrap: jspb.Message.getFieldWithDefault(msg, 11, false),
    webhost: jspb.Message.getFieldWithDefault(msg, 12, ""),
    apihost: jspb.Message.getFieldWithDefault(msg, 13, ""),
    apiloops: jspb.Message.getFieldWithDefault(msg, 14, 0),
    member: (f = msg.getMember()) && proto.store_pb.RaftMember.toObject(includeInstance, f),
    created: jspb.Message.getFieldWithDefault(msg, 18, 0),
    inited: jspb.Message.getFieldWithDefault(msg, 19, 0),
    changed: jspb.Message.getFieldWithDefault(msg, 20, 0),
    dropped: jspb.Message.getFieldWithDefault(msg, 21, 0),
    removed: jspb.Message.getFieldWithDefault(msg, 22, 0),
    drivesList: jspb.Message.toObjectList(msg.getDrivesList(),
    proto.store_pb.Drive.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Node}
 */
proto.store_pb.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Node;
  return proto.store_pb.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Node}
 */
proto.store_pb.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCores(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemory(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setArch(value);
      break;
    case 52:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCpuspeed(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBootstrap(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebhost(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setApihost(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApiloops(value);
      break;
    case 16:
      var value = new proto.store_pb.RaftMember;
      reader.readMessage(value,proto.store_pb.RaftMember.deserializeBinaryFromReader);
      msg.setMember(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCreated(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setInited(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setChanged(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setDropped(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setRemoved(value);
      break;
    case 24:
      var value = new proto.store_pb.Drive;
      reader.readMessage(value,proto.store_pb.Drive.deserializeBinaryFromReader);
      msg.addDrives(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInstanceid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCores();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMemory();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getArch();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
  f = message.getCpuspeed();
  if (f !== 0) {
    writer.writeUint64(
      52,
      f
    );
  }
  f = message.getBootstrap();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getWebhost();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getApihost();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getApiloops();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getMember();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.store_pb.RaftMember.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeFixed64(
      18,
      f
    );
  }
  f = message.getInited();
  if (f !== 0) {
    writer.writeFixed64(
      19,
      f
    );
  }
  f = message.getChanged();
  if (f !== 0) {
    writer.writeFixed64(
      20,
      f
    );
  }
  f = message.getDropped();
  if (f !== 0) {
    writer.writeFixed64(
      21,
      f
    );
  }
  f = message.getRemoved();
  if (f !== 0) {
    writer.writeFixed64(
      22,
      f
    );
  }
  f = message.getDrivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      proto.store_pb.Drive.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.store_pb.Node.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.store_pb.Node.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.store_pb.Node.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string instanceID = 4;
 * @return {string}
 */
proto.store_pb.Node.prototype.getInstanceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setInstanceid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string region = 7;
 * @return {string}
 */
proto.store_pb.Node.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setRegion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string zone = 8;
 * @return {string}
 */
proto.store_pb.Node.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setZone = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 cores = 9;
 * @return {number}
 */
proto.store_pb.Node.prototype.getCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setCores = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 memory = 10;
 * @return {number}
 */
proto.store_pb.Node.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setMemory = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string os = 50;
 * @return {string}
 */
proto.store_pb.Node.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setOs = function(value) {
  jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional string arch = 51;
 * @return {string}
 */
proto.store_pb.Node.prototype.getArch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setArch = function(value) {
  jspb.Message.setProto3StringField(this, 51, value);
};


/**
 * optional uint64 cpuSpeed = 52;
 * @return {number}
 */
proto.store_pb.Node.prototype.getCpuspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 52, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setCpuspeed = function(value) {
  jspb.Message.setProto3IntField(this, 52, value);
};


/**
 * optional bool bootstrap = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.Node.prototype.getBootstrap = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.store_pb.Node.prototype.setBootstrap = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string webHost = 12;
 * @return {string}
 */
proto.store_pb.Node.prototype.getWebhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setWebhost = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string apiHost = 13;
 * @return {string}
 */
proto.store_pb.Node.prototype.getApihost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.store_pb.Node.prototype.setApihost = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint32 apiLoops = 14;
 * @return {number}
 */
proto.store_pb.Node.prototype.getApiloops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setApiloops = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional RaftMember member = 16;
 * @return {?proto.store_pb.RaftMember}
 */
proto.store_pb.Node.prototype.getMember = function() {
  return /** @type{?proto.store_pb.RaftMember} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RaftMember, 16));
};


/** @param {?proto.store_pb.RaftMember|undefined} value */
proto.store_pb.Node.prototype.setMember = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.store_pb.Node.prototype.clearMember = function() {
  this.setMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Node.prototype.hasMember = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional fixed64 created = 18;
 * @return {number}
 */
proto.store_pb.Node.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setCreated = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional fixed64 inited = 19;
 * @return {number}
 */
proto.store_pb.Node.prototype.getInited = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setInited = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional fixed64 changed = 20;
 * @return {number}
 */
proto.store_pb.Node.prototype.getChanged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setChanged = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional fixed64 dropped = 21;
 * @return {number}
 */
proto.store_pb.Node.prototype.getDropped = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setDropped = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional fixed64 removed = 22;
 * @return {number}
 */
proto.store_pb.Node.prototype.getRemoved = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.store_pb.Node.prototype.setRemoved = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated Drive drives = 24;
 * @return {!Array.<!proto.store_pb.Drive>}
 */
proto.store_pb.Node.prototype.getDrivesList = function() {
  return /** @type{!Array.<!proto.store_pb.Drive>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.Drive, 24));
};


/** @param {!Array.<!proto.store_pb.Drive>} value */
proto.store_pb.Node.prototype.setDrivesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.store_pb.Drive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.Drive}
 */
proto.store_pb.Node.prototype.addDrives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.store_pb.Drive, opt_index);
};


proto.store_pb.Node.prototype.clearDrivesList = function() {
  this.setDrivesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.RaftMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.RaftMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.RaftMember.displayName = 'proto.store_pb.RaftMember';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.RaftMember.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.RaftMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.RaftMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RaftMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    membership: jspb.Message.getFieldWithDefault(msg, 4, 0),
    suffrage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    term: jspb.Message.getFieldWithDefault(msg, 10, 0),
    applied: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.RaftMember}
 */
proto.store_pb.RaftMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.RaftMember;
  return proto.store_pb.RaftMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.RaftMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.RaftMember}
 */
proto.store_pb.RaftMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.store_pb.RaftStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {!proto.store_pb.Suffrage} */ (reader.readEnum());
      msg.setMembership(value);
      break;
    case 5:
      var value = /** @type {!proto.store_pb.Suffrage} */ (reader.readEnum());
      msg.setSuffrage(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTerm(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setApplied(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.RaftMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.RaftMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.RaftMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RaftMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMembership();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSuffrage();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTerm();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getApplied();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.store_pb.RaftMember.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.RaftMember.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.store_pb.RaftMember.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.RaftMember.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RaftStatus status = 3;
 * @return {!proto.store_pb.RaftStatus}
 */
proto.store_pb.RaftMember.prototype.getStatus = function() {
  return /** @type {!proto.store_pb.RaftStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.store_pb.RaftStatus} value */
proto.store_pb.RaftMember.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Suffrage membership = 4;
 * @return {!proto.store_pb.Suffrage}
 */
proto.store_pb.RaftMember.prototype.getMembership = function() {
  return /** @type {!proto.store_pb.Suffrage} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.store_pb.Suffrage} value */
proto.store_pb.RaftMember.prototype.setMembership = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Suffrage suffrage = 5;
 * @return {!proto.store_pb.Suffrage}
 */
proto.store_pb.RaftMember.prototype.getSuffrage = function() {
  return /** @type {!proto.store_pb.Suffrage} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.store_pb.Suffrage} value */
proto.store_pb.RaftMember.prototype.setSuffrage = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint64 term = 10;
 * @return {number}
 */
proto.store_pb.RaftMember.prototype.getTerm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.store_pb.RaftMember.prototype.setTerm = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 applied = 11;
 * @return {number}
 */
proto.store_pb.RaftMember.prototype.getApplied = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.store_pb.RaftMember.prototype.setApplied = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.NodeGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.NodeGroup.repeatedFields_, null);
};
goog.inherits(proto.store_pb.NodeGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.NodeGroup.displayName = 'proto.store_pb.NodeGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.NodeGroup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.NodeGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.NodeGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.NodeGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.NodeGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.store_pb.NodeGroup.Member.toObject, includeInstance),
    slices: (f = msg.getSlices()) && proto.store_pb.Slice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.NodeGroup}
 */
proto.store_pb.NodeGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.NodeGroup;
  return proto.store_pb.NodeGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.NodeGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.NodeGroup}
 */
proto.store_pb.NodeGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.store_pb.NodeGroup.Member;
      reader.readMessage(value,proto.store_pb.NodeGroup.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 10:
      var value = new proto.store_pb.Slice;
      reader.readMessage(value,proto.store_pb.Slice.deserializeBinaryFromReader);
      msg.setSlices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.NodeGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.NodeGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.NodeGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.NodeGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.store_pb.NodeGroup.Member.serializeBinaryToWriter
    );
  }
  f = message.getSlices();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.store_pb.Slice.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.NodeGroup.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.NodeGroup.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.NodeGroup.Member.displayName = 'proto.store_pb.NodeGroup.Member';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.NodeGroup.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.NodeGroup.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.NodeGroup.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.NodeGroup.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    suffrage: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.NodeGroup.Member}
 */
proto.store_pb.NodeGroup.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.NodeGroup.Member;
  return proto.store_pb.NodeGroup.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.NodeGroup.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.NodeGroup.Member}
 */
proto.store_pb.NodeGroup.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {!proto.store_pb.Suffrage} */ (reader.readEnum());
      msg.setSuffrage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.NodeGroup.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.NodeGroup.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.NodeGroup.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.NodeGroup.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuffrage();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string nodeID = 1;
 * @return {string}
 */
proto.store_pb.NodeGroup.Member.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.NodeGroup.Member.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Suffrage suffrage = 2;
 * @return {!proto.store_pb.Suffrage}
 */
proto.store_pb.NodeGroup.Member.prototype.getSuffrage = function() {
  return /** @type {!proto.store_pb.Suffrage} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.store_pb.Suffrage} value */
proto.store_pb.NodeGroup.Member.prototype.setSuffrage = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.store_pb.NodeGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.NodeGroup.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.NodeGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.NodeGroup.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Member members = 3;
 * @return {!Array.<!proto.store_pb.NodeGroup.Member>}
 */
proto.store_pb.NodeGroup.prototype.getMembersList = function() {
  return /** @type{!Array.<!proto.store_pb.NodeGroup.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.NodeGroup.Member, 3));
};


/** @param {!Array.<!proto.store_pb.NodeGroup.Member>} value */
proto.store_pb.NodeGroup.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.store_pb.NodeGroup.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.NodeGroup.Member}
 */
proto.store_pb.NodeGroup.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.store_pb.NodeGroup.Member, opt_index);
};


proto.store_pb.NodeGroup.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional Slice slices = 10;
 * @return {?proto.store_pb.Slice}
 */
proto.store_pb.NodeGroup.prototype.getSlices = function() {
  return /** @type{?proto.store_pb.Slice} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Slice, 10));
};


/** @param {?proto.store_pb.Slice|undefined} value */
proto.store_pb.NodeGroup.prototype.setSlices = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.store_pb.NodeGroup.prototype.clearSlices = function() {
  this.setSlices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.NodeGroup.prototype.hasSlices = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Database = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Database.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Database, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Database.displayName = 'proto.store_pb.Database';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Database.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Database.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Database.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Database} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Database.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    created: jspb.Message.getFieldWithDefault(msg, 4, 0),
    changed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    dropped: jspb.Message.getFieldWithDefault(msg, 6, 0),
    removed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    slicesList: jspb.Message.toObjectList(msg.getSlicesList(),
    proto.store_pb.Slice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Database}
 */
proto.store_pb.Database.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Database;
  return proto.store_pb.Database.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Database} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Database}
 */
proto.store_pb.Database.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCreated(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setChanged(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setDropped(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setRemoved(value);
      break;
    case 10:
      var value = new proto.store_pb.Slice;
      reader.readMessage(value,proto.store_pb.Slice.deserializeBinaryFromReader);
      msg.addSlices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Database.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Database.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Database} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Database.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = message.getChanged();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
  f = message.getDropped();
  if (f !== 0) {
    writer.writeFixed64(
      6,
      f
    );
  }
  f = message.getRemoved();
  if (f !== 0) {
    writer.writeFixed64(
      7,
      f
    );
  }
  f = message.getSlicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.store_pb.Slice.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.store_pb.Database.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Database.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Database.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Database.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.store_pb.Database.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.Database.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed64 created = 4;
 * @return {number}
 */
proto.store_pb.Database.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.Database.prototype.setCreated = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed64 changed = 5;
 * @return {number}
 */
proto.store_pb.Database.prototype.getChanged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.Database.prototype.setChanged = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed64 dropped = 6;
 * @return {number}
 */
proto.store_pb.Database.prototype.getDropped = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.store_pb.Database.prototype.setDropped = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed64 removed = 7;
 * @return {number}
 */
proto.store_pb.Database.prototype.getRemoved = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.store_pb.Database.prototype.setRemoved = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated Slice slices = 10;
 * @return {!Array.<!proto.store_pb.Slice>}
 */
proto.store_pb.Database.prototype.getSlicesList = function() {
  return /** @type{!Array.<!proto.store_pb.Slice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.Slice, 10));
};


/** @param {!Array.<!proto.store_pb.Slice>} value */
proto.store_pb.Database.prototype.setSlicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.store_pb.Slice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.Slice}
 */
proto.store_pb.Database.prototype.addSlices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.store_pb.Slice, opt_index);
};


proto.store_pb.Database.prototype.clearSlicesList = function() {
  this.setSlicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.SliceID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.SliceID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.SliceID.displayName = 'proto.store_pb.SliceID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.SliceID.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.SliceID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.SliceID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SliceID.toObject = function(includeInstance, msg) {
  var f, obj = {
    databaseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sliceid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.SliceID}
 */
proto.store_pb.SliceID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.SliceID;
  return proto.store_pb.SliceID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.SliceID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.SliceID}
 */
proto.store_pb.SliceID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatabaseid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSliceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.SliceID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.SliceID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.SliceID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SliceID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabaseid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSliceid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 databaseID = 1;
 * @return {number}
 */
proto.store_pb.SliceID.prototype.getDatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.SliceID.prototype.setDatabaseid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sliceID = 2;
 * @return {number}
 */
proto.store_pb.SliceID.prototype.getSliceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.SliceID.prototype.setSliceid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Slice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Slice.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Slice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Slice.displayName = 'proto.store_pb.Slice';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Slice.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Slice.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Slice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Slice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Slice.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.store_pb.SliceID.toObject(includeInstance, f),
    slotsList: jspb.Message.toObjectList(msg.getSlotsList(),
    proto.store_pb.SlotRange.toObject, includeInstance),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.store_pb.SliceNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Slice}
 */
proto.store_pb.Slice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Slice;
  return proto.store_pb.Slice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Slice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Slice}
 */
proto.store_pb.Slice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.SliceID;
      reader.readMessage(value,proto.store_pb.SliceID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.store_pb.SlotRange;
      reader.readMessage(value,proto.store_pb.SlotRange.deserializeBinaryFromReader);
      msg.addSlots(value);
      break;
    case 3:
      var value = new proto.store_pb.SliceNode;
      reader.readMessage(value,proto.store_pb.SliceNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Slice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Slice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Slice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Slice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.store_pb.SliceID.serializeBinaryToWriter
    );
  }
  f = message.getSlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.store_pb.SlotRange.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.store_pb.SliceNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional SliceID id = 1;
 * @return {?proto.store_pb.SliceID}
 */
proto.store_pb.Slice.prototype.getId = function() {
  return /** @type{?proto.store_pb.SliceID} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.SliceID, 1));
};


/** @param {?proto.store_pb.SliceID|undefined} value */
proto.store_pb.Slice.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.store_pb.Slice.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Slice.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SlotRange slots = 2;
 * @return {!Array.<!proto.store_pb.SlotRange>}
 */
proto.store_pb.Slice.prototype.getSlotsList = function() {
  return /** @type{!Array.<!proto.store_pb.SlotRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.SlotRange, 2));
};


/** @param {!Array.<!proto.store_pb.SlotRange>} value */
proto.store_pb.Slice.prototype.setSlotsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.store_pb.SlotRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.SlotRange}
 */
proto.store_pb.Slice.prototype.addSlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.store_pb.SlotRange, opt_index);
};


proto.store_pb.Slice.prototype.clearSlotsList = function() {
  this.setSlotsList([]);
};


/**
 * repeated SliceNode nodes = 3;
 * @return {!Array.<!proto.store_pb.SliceNode>}
 */
proto.store_pb.Slice.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.store_pb.SliceNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.SliceNode, 3));
};


/** @param {!Array.<!proto.store_pb.SliceNode>} value */
proto.store_pb.Slice.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.store_pb.SliceNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.SliceNode}
 */
proto.store_pb.Slice.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.store_pb.SliceNode, opt_index);
};


proto.store_pb.Slice.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.SliceNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.SliceNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.SliceNode.displayName = 'proto.store_pb.SliceNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.SliceNode.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.SliceNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.SliceNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SliceNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sliceid: (f = msg.getSliceid()) && proto.store_pb.SliceID.toObject(includeInstance, f),
    member: (f = msg.getMember()) && proto.store_pb.RaftMember.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.SliceNode}
 */
proto.store_pb.SliceNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.SliceNode;
  return proto.store_pb.SliceNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.SliceNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.SliceNode}
 */
proto.store_pb.SliceNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = new proto.store_pb.SliceID;
      reader.readMessage(value,proto.store_pb.SliceID.deserializeBinaryFromReader);
      msg.setSliceid(value);
      break;
    case 3:
      var value = new proto.store_pb.RaftMember;
      reader.readMessage(value,proto.store_pb.RaftMember.deserializeBinaryFromReader);
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.SliceNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.SliceNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.SliceNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SliceNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSliceid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.store_pb.SliceID.serializeBinaryToWriter
    );
  }
  f = message.getMember();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.store_pb.RaftMember.serializeBinaryToWriter
    );
  }
};


/**
 * optional string nodeID = 1;
 * @return {string}
 */
proto.store_pb.SliceNode.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.SliceNode.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SliceID sliceID = 2;
 * @return {?proto.store_pb.SliceID}
 */
proto.store_pb.SliceNode.prototype.getSliceid = function() {
  return /** @type{?proto.store_pb.SliceID} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.SliceID, 2));
};


/** @param {?proto.store_pb.SliceID|undefined} value */
proto.store_pb.SliceNode.prototype.setSliceid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.store_pb.SliceNode.prototype.clearSliceid = function() {
  this.setSliceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.SliceNode.prototype.hasSliceid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RaftMember member = 3;
 * @return {?proto.store_pb.RaftMember}
 */
proto.store_pb.SliceNode.prototype.getMember = function() {
  return /** @type{?proto.store_pb.RaftMember} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RaftMember, 3));
};


/** @param {?proto.store_pb.RaftMember|undefined} value */
proto.store_pb.SliceNode.prototype.setMember = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.store_pb.SliceNode.prototype.clearMember = function() {
  this.setMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.SliceNode.prototype.hasMember = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Rebalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Rebalance.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Rebalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Rebalance.displayName = 'proto.store_pb.Rebalance';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Rebalance.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Rebalance.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Rebalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Rebalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Rebalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.store_pb.Rebalance.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Rebalance}
 */
proto.store_pb.Rebalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Rebalance;
  return proto.store_pb.Rebalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Rebalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Rebalance}
 */
proto.store_pb.Rebalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.store_pb.Rebalance.Task;
      reader.readMessage(value,proto.store_pb.Rebalance.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Rebalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Rebalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Rebalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Rebalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.store_pb.Rebalance.Task.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Rebalance.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Rebalance.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Rebalance.Task.displayName = 'proto.store_pb.Rebalance.Task';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Rebalance.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Rebalance.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Rebalance.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Rebalance.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: jspb.Message.getFieldWithDefault(msg, 2, 0),
    low: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Rebalance.Task}
 */
proto.store_pb.Rebalance.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Rebalance.Task;
  return proto.store_pb.Rebalance.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Rebalance.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Rebalance.Task}
 */
proto.store_pb.Rebalance.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Rebalance.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Rebalance.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Rebalance.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Rebalance.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 from = 1;
 * @return {number}
 */
proto.store_pb.Rebalance.Task.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Rebalance.Task.prototype.setFrom = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to = 2;
 * @return {number}
 */
proto.store_pb.Rebalance.Task.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.Rebalance.Task.prototype.setTo = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 low = 3;
 * @return {number}
 */
proto.store_pb.Rebalance.Task.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.Rebalance.Task.prototype.setLow = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.store_pb.Rebalance.Task.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.Rebalance.Task.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.store_pb.Rebalance.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Rebalance.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Task tasks = 2;
 * @return {!Array.<!proto.store_pb.Rebalance.Task>}
 */
proto.store_pb.Rebalance.prototype.getTasksList = function() {
  return /** @type{!Array.<!proto.store_pb.Rebalance.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.Rebalance.Task, 2));
};


/** @param {!Array.<!proto.store_pb.Rebalance.Task>} value */
proto.store_pb.Rebalance.prototype.setTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.store_pb.Rebalance.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.Rebalance.Task}
 */
proto.store_pb.Rebalance.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.store_pb.Rebalance.Task, opt_index);
};


proto.store_pb.Rebalance.prototype.clearTasksList = function() {
  this.setTasksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Ring = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Ring.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Ring, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Ring.displayName = 'proto.store_pb.Ring';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Ring.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Ring.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Ring.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Ring} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Ring.toObject = function(includeInstance, msg) {
  var f, obj = {
    rangesList: jspb.Message.toObjectList(msg.getRangesList(),
    proto.store_pb.SlotRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Ring}
 */
proto.store_pb.Ring.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Ring;
  return proto.store_pb.Ring.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Ring} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Ring}
 */
proto.store_pb.Ring.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.store_pb.SlotRange;
      reader.readMessage(value,proto.store_pb.SlotRange.deserializeBinaryFromReader);
      msg.addRanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Ring.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Ring.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Ring} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Ring.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.store_pb.SlotRange.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SlotRange ranges = 2;
 * @return {!Array.<!proto.store_pb.SlotRange>}
 */
proto.store_pb.Ring.prototype.getRangesList = function() {
  return /** @type{!Array.<!proto.store_pb.SlotRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.SlotRange, 2));
};


/** @param {!Array.<!proto.store_pb.SlotRange>} value */
proto.store_pb.Ring.prototype.setRangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.store_pb.SlotRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.SlotRange}
 */
proto.store_pb.Ring.prototype.addRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.store_pb.SlotRange, opt_index);
};


proto.store_pb.Ring.prototype.clearRangesList = function() {
  this.setRangesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.SlotRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.SlotRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.SlotRange.displayName = 'proto.store_pb.SlotRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.SlotRange.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.SlotRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.SlotRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SlotRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    slice: jspb.Message.getFieldWithDefault(msg, 1, 0),
    low: jspb.Message.getFieldWithDefault(msg, 2, 0),
    high: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.SlotRange}
 */
proto.store_pb.SlotRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.SlotRange;
  return proto.store_pb.SlotRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.SlotRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.SlotRange}
 */
proto.store_pb.SlotRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLow(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHigh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.SlotRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.SlotRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.SlotRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SlotRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlice();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 slice = 1;
 * @return {number}
 */
proto.store_pb.SlotRange.prototype.getSlice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.SlotRange.prototype.setSlice = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 low = 2;
 * @return {number}
 */
proto.store_pb.SlotRange.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.SlotRange.prototype.setLow = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 high = 3;
 * @return {number}
 */
proto.store_pb.SlotRange.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.SlotRange.prototype.setHigh = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Drive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Drive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Drive.displayName = 'proto.store_pb.Drive';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Drive.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Drive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Drive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Drive.toObject = function(includeInstance, msg) {
  var f, obj = {
    mount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stats: (f = msg.getStats()) && proto.store_pb.DriveStats.toObject(includeInstance, f),
    working: jspb.Message.getFieldWithDefault(msg, 4, false),
    filesystem: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Drive}
 */
proto.store_pb.Drive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Drive;
  return proto.store_pb.Drive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Drive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Drive}
 */
proto.store_pb.Drive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMount(value);
      break;
    case 2:
      var value = /** @type {!proto.store_pb.Drive.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = new proto.store_pb.DriveStats;
      reader.readMessage(value,proto.store_pb.DriveStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWorking(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilesystem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Drive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Drive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Drive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Drive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.store_pb.DriveStats.serializeBinaryToWriter
    );
  }
  f = message.getWorking();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFilesystem();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.store_pb.Drive.Kind = {
  HDD: 0,
  SSD: 1,
  NVME: 2
};

/**
 * optional string mount = 1;
 * @return {string}
 */
proto.store_pb.Drive.prototype.getMount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Drive.prototype.setMount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Kind kind = 2;
 * @return {!proto.store_pb.Drive.Kind}
 */
proto.store_pb.Drive.prototype.getKind = function() {
  return /** @type {!proto.store_pb.Drive.Kind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.store_pb.Drive.Kind} value */
proto.store_pb.Drive.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional DriveStats stats = 3;
 * @return {?proto.store_pb.DriveStats}
 */
proto.store_pb.Drive.prototype.getStats = function() {
  return /** @type{?proto.store_pb.DriveStats} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.DriveStats, 3));
};


/** @param {?proto.store_pb.DriveStats|undefined} value */
proto.store_pb.Drive.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.store_pb.Drive.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Drive.prototype.hasStats = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool working = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.Drive.prototype.getWorking = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.store_pb.Drive.prototype.setWorking = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string fileSystem = 5;
 * @return {string}
 */
proto.store_pb.Drive.prototype.getFilesystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.store_pb.Drive.prototype.setFilesystem = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.DriveStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.DriveStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.DriveStats.displayName = 'proto.store_pb.DriveStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.DriveStats.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.DriveStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.DriveStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.DriveStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    used: jspb.Message.getFieldWithDefault(msg, 2, 0),
    avail: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.DriveStats}
 */
proto.store_pb.DriveStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.DriveStats;
  return proto.store_pb.DriveStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.DriveStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.DriveStats}
 */
proto.store_pb.DriveStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.DriveStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.DriveStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.DriveStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.DriveStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAvail();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 size = 1;
 * @return {number}
 */
proto.store_pb.DriveStats.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.DriveStats.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 used = 2;
 * @return {number}
 */
proto.store_pb.DriveStats.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.DriveStats.prototype.setUsed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 avail = 3;
 * @return {number}
 */
proto.store_pb.DriveStats.prototype.getAvail = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.DriveStats.prototype.setAvail = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Bucket.displayName = 'proto.store_pb.Bucket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesskey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secretkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    api: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Bucket}
 */
proto.store_pb.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Bucket;
  return proto.store_pb.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Bucket}
 */
proto.store_pb.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesskey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {!proto.store_pb.Bucket.API} */ (reader.readEnum());
      msg.setApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesskey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecretkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getApi();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.store_pb.Bucket.API = {
  S3: 0
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.store_pb.Bucket.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Bucket.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessKey = 2;
 * @return {string}
 */
proto.store_pb.Bucket.prototype.getAccesskey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Bucket.prototype.setAccesskey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string secretKey = 3;
 * @return {string}
 */
proto.store_pb.Bucket.prototype.getSecretkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.Bucket.prototype.setSecretkey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.store_pb.Bucket.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.store_pb.Bucket.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional API api = 5;
 * @return {!proto.store_pb.Bucket.API}
 */
proto.store_pb.Bucket.prototype.getApi = function() {
  return /** @type {!proto.store_pb.Bucket.API} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.store_pb.Bucket.API} value */
proto.store_pb.Bucket.prototype.setApi = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.RecordID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.RecordID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.RecordID.displayName = 'proto.store_pb.RecordID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.RecordID.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.RecordID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.RecordID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RecordID.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.RecordID}
 */
proto.store_pb.RecordID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.RecordID;
  return proto.store_pb.RecordID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.RecordID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.RecordID}
 */
proto.store_pb.RecordID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.RecordID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.RecordID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.RecordID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RecordID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.store_pb.RecordID.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.RecordID.prototype.setEpoch = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 seq = 2;
 * @return {number}
 */
proto.store_pb.RecordID.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.RecordID.prototype.setSeq = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Record.displayName = 'proto.store_pb.Record';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.store_pb.Projection.toObject(includeInstance, f),
    slice: (f = msg.getSlice()) && proto.store_pb.Projection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Record}
 */
proto.store_pb.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Record;
  return proto.store_pb.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Record}
 */
proto.store_pb.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.Projection;
      reader.readMessage(value,proto.store_pb.Projection.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.store_pb.Projection;
      reader.readMessage(value,proto.store_pb.Projection.deserializeBinaryFromReader);
      msg.setSlice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.store_pb.Projection.serializeBinaryToWriter
    );
  }
  f = message.getSlice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.store_pb.Projection.serializeBinaryToWriter
    );
  }
};


/**
 * optional Projection key = 1;
 * @return {?proto.store_pb.Projection}
 */
proto.store_pb.Record.prototype.getKey = function() {
  return /** @type{?proto.store_pb.Projection} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Projection, 1));
};


/** @param {?proto.store_pb.Projection|undefined} value */
proto.store_pb.Record.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.store_pb.Record.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Record.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Projection slice = 2;
 * @return {?proto.store_pb.Projection}
 */
proto.store_pb.Record.prototype.getSlice = function() {
  return /** @type{?proto.store_pb.Projection} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Projection, 2));
};


/** @param {?proto.store_pb.Projection|undefined} value */
proto.store_pb.Record.prototype.setSlice = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.store_pb.Record.prototype.clearSlice = function() {
  this.setSlice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Record.prototype.hasSlice = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Projection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Projection.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Projection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Projection.displayName = 'proto.store_pb.Projection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Projection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Projection.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Projection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Projection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Projection.toObject = function(includeInstance, msg) {
  var f, obj = {
    codec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    namesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Projection}
 */
proto.store_pb.Projection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Projection;
  return proto.store_pb.Projection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Projection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Projection}
 */
proto.store_pb.Projection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.store_pb.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Projection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Projection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Projection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Projection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Projection.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Projection.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Projection.Field.displayName = 'proto.store_pb.Projection.Field';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Projection.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Projection.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Projection.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Projection.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Projection.Field}
 */
proto.store_pb.Projection.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Projection.Field;
  return proto.store_pb.Projection.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Projection.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Projection.Field}
 */
proto.store_pb.Projection.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Projection.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Projection.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Projection.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Projection.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.store_pb.Projection.Field.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Projection.Field.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Projection.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Projection.Field.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Codec codec = 1;
 * @return {!proto.store_pb.Codec}
 */
proto.store_pb.Projection.prototype.getCodec = function() {
  return /** @type {!proto.store_pb.Codec} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.store_pb.Codec} value */
proto.store_pb.Projection.prototype.setCodec = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string names = 2;
 * @return {!Array.<string>}
 */
proto.store_pb.Projection.prototype.getNamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.store_pb.Projection.prototype.setNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.store_pb.Projection.prototype.addNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.store_pb.Projection.prototype.clearNamesList = function() {
  this.setNamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Index.displayName = 'proto.store_pb.Index';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Index.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Index}
 */
proto.store_pb.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Index;
  return proto.store_pb.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Index}
 */
proto.store_pb.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.store_pb.Index.Type = {
  BTREE: 0,
  PREFIX: 2,
  RTREE: 3,
  FULLTEXT: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Topic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Topic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Topic.displayName = 'proto.store_pb.Topic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Topic.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Topic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Topic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Topic.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: jspb.Message.getFieldWithDefault(msg, 15, ""),
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    queueid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rollerid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    writespeed: jspb.Message.getFieldWithDefault(msg, 8, 0),
    codec: jspb.Message.getFieldWithDefault(msg, 9, 0),
    key: (f = msg.getKey()) && proto.store_pb.Projection.toObject(includeInstance, f),
    slicekey: (f = msg.getSlicekey()) && proto.store_pb.Projection.toObject(includeInstance, f),
    drive: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Topic}
 */
proto.store_pb.Topic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Topic;
  return proto.store_pb.Topic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Topic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Topic}
 */
proto.store_pb.Topic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {!proto.store_pb.Topic.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setQueueid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRollerid(value);
      break;
    case 7:
      var value = /** @type {!proto.store_pb.Topic.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWritespeed(value);
      break;
    case 9:
      var value = /** @type {!proto.store_pb.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 10:
      var value = new proto.store_pb.Projection;
      reader.readMessage(value,proto.store_pb.Projection.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 11:
      var value = new proto.store_pb.Projection;
      reader.readMessage(value,proto.store_pb.Projection.deserializeBinaryFromReader);
      msg.setSlicekey(value);
      break;
    case 12:
      var value = /** @type {!proto.store_pb.Drive.Kind} */ (reader.readEnum());
      msg.setDrive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Topic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Topic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Topic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Topic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getQueueid();
  if (f !== 0) {
    writer.writeSint64(
      5,
      f
    );
  }
  f = message.getRollerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getWritespeed();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.store_pb.Projection.serializeBinaryToWriter
    );
  }
  f = message.getSlicekey();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.store_pb.Projection.serializeBinaryToWriter
    );
  }
  f = message.getDrive();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.store_pb.Topic.Type = {
  STANDARD: 0
};

/**
 * @enum {number}
 */
proto.store_pb.Topic.Mode = {
  LOG: 0,
  QUEUE: 1,
  TABLE: 2,
  CACHE: 3
};

/**
 * optional string schema = 15;
 * @return {string}
 */
proto.store_pb.Topic.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.store_pb.Topic.prototype.setSchema = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.store_pb.Topic.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Topic.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Topic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Topic.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 slot = 3;
 * @return {number}
 */
proto.store_pb.Topic.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.Topic.prototype.setSlot = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Type type = 4;
 * @return {!proto.store_pb.Topic.Type}
 */
proto.store_pb.Topic.prototype.getType = function() {
  return /** @type {!proto.store_pb.Topic.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.store_pb.Topic.Type} value */
proto.store_pb.Topic.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional sint64 queueID = 5;
 * @return {number}
 */
proto.store_pb.Topic.prototype.getQueueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.Topic.prototype.setQueueid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string rollerID = 6;
 * @return {string}
 */
proto.store_pb.Topic.prototype.getRollerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.store_pb.Topic.prototype.setRollerid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Mode mode = 7;
 * @return {!proto.store_pb.Topic.Mode}
 */
proto.store_pb.Topic.prototype.getMode = function() {
  return /** @type {!proto.store_pb.Topic.Mode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.store_pb.Topic.Mode} value */
proto.store_pb.Topic.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int32 writeSpeed = 8;
 * @return {number}
 */
proto.store_pb.Topic.prototype.getWritespeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.store_pb.Topic.prototype.setWritespeed = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Codec codec = 9;
 * @return {!proto.store_pb.Codec}
 */
proto.store_pb.Topic.prototype.getCodec = function() {
  return /** @type {!proto.store_pb.Codec} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.store_pb.Codec} value */
proto.store_pb.Topic.prototype.setCodec = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional Projection key = 10;
 * @return {?proto.store_pb.Projection}
 */
proto.store_pb.Topic.prototype.getKey = function() {
  return /** @type{?proto.store_pb.Projection} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Projection, 10));
};


/** @param {?proto.store_pb.Projection|undefined} value */
proto.store_pb.Topic.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.store_pb.Topic.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Topic.prototype.hasKey = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Projection sliceKey = 11;
 * @return {?proto.store_pb.Projection}
 */
proto.store_pb.Topic.prototype.getSlicekey = function() {
  return /** @type{?proto.store_pb.Projection} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Projection, 11));
};


/** @param {?proto.store_pb.Projection|undefined} value */
proto.store_pb.Topic.prototype.setSlicekey = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.store_pb.Topic.prototype.clearSlicekey = function() {
  this.setSlicekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Topic.prototype.hasSlicekey = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Drive.Kind drive = 12;
 * @return {!proto.store_pb.Drive.Kind}
 */
proto.store_pb.Topic.prototype.getDrive = function() {
  return /** @type {!proto.store_pb.Drive.Kind} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.store_pb.Drive.Kind} value */
proto.store_pb.Topic.prototype.setDrive = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Roller = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Roller, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Roller.displayName = 'proto.store_pb.Roller';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Roller.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Roller.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Roller} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Roller.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minbytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mincount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxbytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxage: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxcount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Roller}
 */
proto.store_pb.Roller.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Roller;
  return proto.store_pb.Roller.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Roller} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Roller}
 */
proto.store_pb.Roller.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinbytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMincount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxbytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Roller.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Roller.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Roller} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Roller.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinbytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMinage();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMincount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMaxbytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxage();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Roller.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Roller.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 minBytes = 3;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMinbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMinbytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 minAge = 4;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMinage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMinage = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 minCount = 5;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMincount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMincount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 maxBytes = 6;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMaxbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMaxbytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 maxAge = 7;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMaxage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMaxage = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 maxCount = 8;
 * @return {number}
 */
proto.store_pb.Roller.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.store_pb.Roller.prototype.setMaxcount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Path.displayName = 'proto.store_pb.Path';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Path} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volumeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    drive: jspb.Message.getFieldWithDefault(msg, 3, ""),
    local: jspb.Message.getFieldWithDefault(msg, 4, false),
    bucket: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Path}
 */
proto.store_pb.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Path;
  return proto.store_pb.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Path}
 */
proto.store_pb.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolumeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrive(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocal(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBucket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Path.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolumeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDrive();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocal();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBucket();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.store_pb.Path.Type = {
  LOCAL: 0,
  BUCKET: 1
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.store_pb.Path.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Path.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string volumeID = 2;
 * @return {string}
 */
proto.store_pb.Path.prototype.getVolumeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Path.prototype.setVolumeid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string drive = 3;
 * @return {string}
 */
proto.store_pb.Path.prototype.getDrive = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.Path.prototype.setDrive = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool local = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.Path.prototype.getLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.store_pb.Path.prototype.setLocal = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool bucket = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.Path.prototype.getBucket = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.store_pb.Path.prototype.setBucket = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Hash.displayName = 'proto.store_pb.Hash';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Hash}
 */
proto.store_pb.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Hash;
  return proto.store_pb.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Hash}
 */
proto.store_pb.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.store_pb.Hash.Algorithm = {
  CRC32: 0
};

/**
 * optional string algorithm = 1;
 * @return {string}
 */
proto.store_pb.Hash.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.Hash.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.store_pb.Hash.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.store_pb.Hash.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.store_pb.Hash.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.store_pb.Hash.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Segment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Segment.displayName = 'proto.store_pb.Segment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Segment.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Segment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Segment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Segment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    topicid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    path: (f = msg.getPath()) && proto.store_pb.Path.toObject(includeInstance, f),
    header: (f = msg.getHeader()) && proto.store_pb.SegmentHeader.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.store_pb.SegmentStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Segment}
 */
proto.store_pb.Segment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Segment;
  return proto.store_pb.Segment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Segment}
 */
proto.store_pb.Segment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTopicid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlice(value);
      break;
    case 4:
      var value = new proto.store_pb.Path;
      reader.readMessage(value,proto.store_pb.Path.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 5:
      var value = new proto.store_pb.SegmentHeader;
      reader.readMessage(value,proto.store_pb.SegmentHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 6:
      var value = new proto.store_pb.SegmentStats;
      reader.readMessage(value,proto.store_pb.SegmentStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Segment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Segment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Segment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTopicid();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getSlice();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.store_pb.Path.serializeBinaryToWriter
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.store_pb.SegmentHeader.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.store_pb.SegmentStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.store_pb.Segment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Segment.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint64 topicID = 2;
 * @return {number}
 */
proto.store_pb.Segment.prototype.getTopicid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.Segment.prototype.setTopicid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 slice = 3;
 * @return {number}
 */
proto.store_pb.Segment.prototype.getSlice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.Segment.prototype.setSlice = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Path path = 4;
 * @return {?proto.store_pb.Path}
 */
proto.store_pb.Segment.prototype.getPath = function() {
  return /** @type{?proto.store_pb.Path} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Path, 4));
};


/** @param {?proto.store_pb.Path|undefined} value */
proto.store_pb.Segment.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.store_pb.Segment.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Segment.prototype.hasPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SegmentHeader header = 5;
 * @return {?proto.store_pb.SegmentHeader}
 */
proto.store_pb.Segment.prototype.getHeader = function() {
  return /** @type{?proto.store_pb.SegmentHeader} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.SegmentHeader, 5));
};


/** @param {?proto.store_pb.SegmentHeader|undefined} value */
proto.store_pb.Segment.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.store_pb.Segment.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Segment.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SegmentStats stats = 6;
 * @return {?proto.store_pb.SegmentStats}
 */
proto.store_pb.Segment.prototype.getStats = function() {
  return /** @type{?proto.store_pb.SegmentStats} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.SegmentStats, 6));
};


/** @param {?proto.store_pb.SegmentStats|undefined} value */
proto.store_pb.Segment.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.store_pb.Segment.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.Segment.prototype.hasStats = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.SegmentStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.SegmentStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.SegmentStats.displayName = 'proto.store_pb.SegmentStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.SegmentStats.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.SegmentStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.SegmentStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SegmentStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: (f = msg.getHash()) && proto.store_pb.Hash.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    header: jspb.Message.getFieldWithDefault(msg, 3, 0),
    body: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxbody: jspb.Message.getFieldWithDefault(msg, 6, 0),
    first: (f = msg.getFirst()) && proto.store_pb.RecordPointer.toObject(includeInstance, f),
    last: (f = msg.getLast()) && proto.store_pb.RecordPointer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.SegmentStats}
 */
proto.store_pb.SegmentStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.SegmentStats;
  return proto.store_pb.SegmentStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.SegmentStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.SegmentStats}
 */
proto.store_pb.SegmentStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.Hash;
      reader.readMessage(value,proto.store_pb.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeader(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxbody(value);
      break;
    case 7:
      var value = new proto.store_pb.RecordPointer;
      reader.readMessage(value,proto.store_pb.RecordPointer.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 8:
      var value = new proto.store_pb.RecordPointer;
      reader.readMessage(value,proto.store_pb.RecordPointer.deserializeBinaryFromReader);
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.SegmentStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.SegmentStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.SegmentStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SegmentStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.store_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHeader();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBody();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMaxbody();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.store_pb.RecordPointer.serializeBinaryToWriter
    );
  }
  f = message.getLast();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.store_pb.RecordPointer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Hash hash = 1;
 * @return {?proto.store_pb.Hash}
 */
proto.store_pb.SegmentStats.prototype.getHash = function() {
  return /** @type{?proto.store_pb.Hash} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Hash, 1));
};


/** @param {?proto.store_pb.Hash|undefined} value */
proto.store_pb.SegmentStats.prototype.setHash = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.store_pb.SegmentStats.prototype.clearHash = function() {
  this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.SegmentStats.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 count = 2;
 * @return {number}
 */
proto.store_pb.SegmentStats.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.SegmentStats.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 header = 3;
 * @return {number}
 */
proto.store_pb.SegmentStats.prototype.getHeader = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.SegmentStats.prototype.setHeader = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 body = 4;
 * @return {number}
 */
proto.store_pb.SegmentStats.prototype.getBody = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.SegmentStats.prototype.setBody = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 size = 5;
 * @return {number}
 */
proto.store_pb.SegmentStats.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.SegmentStats.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 maxBody = 6;
 * @return {number}
 */
proto.store_pb.SegmentStats.prototype.getMaxbody = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.store_pb.SegmentStats.prototype.setMaxbody = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional RecordPointer first = 7;
 * @return {?proto.store_pb.RecordPointer}
 */
proto.store_pb.SegmentStats.prototype.getFirst = function() {
  return /** @type{?proto.store_pb.RecordPointer} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RecordPointer, 7));
};


/** @param {?proto.store_pb.RecordPointer|undefined} value */
proto.store_pb.SegmentStats.prototype.setFirst = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.store_pb.SegmentStats.prototype.clearFirst = function() {
  this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.SegmentStats.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RecordPointer last = 8;
 * @return {?proto.store_pb.RecordPointer}
 */
proto.store_pb.SegmentStats.prototype.getLast = function() {
  return /** @type{?proto.store_pb.RecordPointer} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RecordPointer, 8));
};


/** @param {?proto.store_pb.RecordPointer|undefined} value */
proto.store_pb.SegmentStats.prototype.setLast = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.store_pb.SegmentStats.prototype.clearLast = function() {
  this.setLast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.SegmentStats.prototype.hasLast = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.SegmentHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.SegmentHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.SegmentHeader.displayName = 'proto.store_pb.SegmentHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.SegmentHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.SegmentHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.SegmentHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SegmentHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    topicid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    logid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startindex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.SegmentHeader}
 */
proto.store_pb.SegmentHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.SegmentHeader;
  return proto.store_pb.SegmentHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.SegmentHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.SegmentHeader}
 */
proto.store_pb.SegmentHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTopicid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLogid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.SegmentHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.SegmentHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.SegmentHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.SegmentHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTopicid();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getLogid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStartindex();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.store_pb.SegmentHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.SegmentHeader.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint64 topicID = 2;
 * @return {number}
 */
proto.store_pb.SegmentHeader.prototype.getTopicid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.SegmentHeader.prototype.setTopicid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 logID = 3;
 * @return {number}
 */
proto.store_pb.SegmentHeader.prototype.getLogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.SegmentHeader.prototype.setLogid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 startIndex = 4;
 * @return {number}
 */
proto.store_pb.SegmentHeader.prototype.getStartindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.SegmentHeader.prototype.setStartindex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.GlobalID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.GlobalID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.GlobalID.displayName = 'proto.store_pb.GlobalID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.GlobalID.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.GlobalID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.GlobalID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.GlobalID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recid: (f = msg.getRecid()) && proto.store_pb.RecordID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.GlobalID}
 */
proto.store_pb.GlobalID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.GlobalID;
  return proto.store_pb.GlobalID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.GlobalID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.GlobalID}
 */
proto.store_pb.GlobalID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlot(value);
      break;
    case 3:
      var value = new proto.store_pb.RecordID;
      reader.readMessage(value,proto.store_pb.RecordID.deserializeBinaryFromReader);
      msg.setRecid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.GlobalID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.GlobalID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.GlobalID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.GlobalID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRecid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.store_pb.RecordID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.store_pb.GlobalID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.GlobalID.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 slot = 2;
 * @return {number}
 */
proto.store_pb.GlobalID.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.GlobalID.prototype.setSlot = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RecordID recID = 3;
 * @return {?proto.store_pb.RecordID}
 */
proto.store_pb.GlobalID.prototype.getRecid = function() {
  return /** @type{?proto.store_pb.RecordID} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RecordID, 3));
};


/** @param {?proto.store_pb.RecordID|undefined} value */
proto.store_pb.GlobalID.prototype.setRecid = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.store_pb.GlobalID.prototype.clearRecid = function() {
  this.setRecid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.GlobalID.prototype.hasRecid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.RecordPointer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.RecordPointer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.RecordPointer.displayName = 'proto.store_pb.RecordPointer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.RecordPointer.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.RecordPointer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.RecordPointer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RecordPointer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.store_pb.RecordID.toObject(includeInstance, f),
    logid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pos: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.RecordPointer}
 */
proto.store_pb.RecordPointer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.RecordPointer;
  return proto.store_pb.RecordPointer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.RecordPointer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.RecordPointer}
 */
proto.store_pb.RecordPointer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.RecordID;
      reader.readMessage(value,proto.store_pb.RecordID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLogid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.RecordPointer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.RecordPointer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.RecordPointer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.RecordPointer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.store_pb.RecordID.serializeBinaryToWriter
    );
  }
  f = message.getLogid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPos();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional RecordID id = 1;
 * @return {?proto.store_pb.RecordID}
 */
proto.store_pb.RecordPointer.prototype.getId = function() {
  return /** @type{?proto.store_pb.RecordID} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.RecordID, 1));
};


/** @param {?proto.store_pb.RecordID|undefined} value */
proto.store_pb.RecordPointer.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.store_pb.RecordPointer.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.RecordPointer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 logID = 2;
 * @return {number}
 */
proto.store_pb.RecordPointer.prototype.getLogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.RecordPointer.prototype.setLogid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 slot = 3;
 * @return {number}
 */
proto.store_pb.RecordPointer.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.RecordPointer.prototype.setSlot = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 size = 4;
 * @return {number}
 */
proto.store_pb.RecordPointer.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.RecordPointer.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 pos = 5;
 * @return {number}
 */
proto.store_pb.RecordPointer.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.RecordPointer.prototype.setPos = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Queue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.Queue.repeatedFields_, null);
};
goog.inherits(proto.store_pb.Queue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Queue.displayName = 'proto.store_pb.Queue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.Queue.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Queue.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Queue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Queue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Queue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    replyid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    errorid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fifo: jspb.Message.getFieldWithDefault(msg, 10, false),
    maxinflight: jspb.Message.getFieldWithDefault(msg, 11, 0),
    maxvisibility: jspb.Message.getFieldWithDefault(msg, 12, 0),
    maxdelay: jspb.Message.getFieldWithDefault(msg, 13, 0),
    maxretries: jspb.Message.getFieldWithDefault(msg, 14, 0),
    appid: jspb.Message.getFieldWithDefault(msg, 15, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Queue}
 */
proto.store_pb.Queue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Queue;
  return proto.store_pb.Queue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Queue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Queue}
 */
proto.store_pb.Queue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplyid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setErrorid(value);
      break;
    case 6:
      var value = /** @type {!proto.store_pb.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFifo(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxinflight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxvisibility(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxdelay(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxretries(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Queue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Queue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Queue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Queue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReplyid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getErrorid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFifo();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getMaxinflight();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getMaxvisibility();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getMaxdelay();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getMaxretries();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Queue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Queue.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 requestID = 3;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 replyID = 4;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getReplyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setReplyid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 errorID = 5;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getErrorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setErrorid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Level level = 6;
 * @return {!proto.store_pb.Level}
 */
proto.store_pb.Queue.prototype.getLevel = function() {
  return /** @type {!proto.store_pb.Level} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.store_pb.Level} value */
proto.store_pb.Queue.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool fifo = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.Queue.prototype.getFifo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.store_pb.Queue.prototype.setFifo = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional uint64 maxInflight = 11;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getMaxinflight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setMaxinflight = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 maxVisibility = 12;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getMaxvisibility = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setMaxvisibility = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 maxDelay = 13;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getMaxdelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setMaxdelay = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 maxRetries = 14;
 * @return {number}
 */
proto.store_pb.Queue.prototype.getMaxretries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.store_pb.Queue.prototype.setMaxretries = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string appID = 15;
 * @return {string}
 */
proto.store_pb.Queue.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.store_pb.Queue.prototype.setAppid = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated string tags = 16;
 * @return {!Array.<string>}
 */
proto.store_pb.Queue.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/** @param {!Array.<string>} value */
proto.store_pb.Queue.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.store_pb.Queue.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.store_pb.Queue.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.Daemon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.Daemon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.Daemon.displayName = 'proto.store_pb.Daemon';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.Daemon.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.Daemon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.Daemon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Daemon.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.Daemon}
 */
proto.store_pb.Daemon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.Daemon;
  return proto.store_pb.Daemon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.Daemon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.Daemon}
 */
proto.store_pb.Daemon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.store_pb.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.Daemon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.Daemon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.Daemon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.Daemon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.store_pb.Daemon.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.Daemon.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.store_pb.Daemon.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.store_pb.Daemon.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Level level = 3;
 * @return {!proto.store_pb.Level}
 */
proto.store_pb.Daemon.prototype.getLevel = function() {
  return /** @type {!proto.store_pb.Level} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.store_pb.Level} value */
proto.store_pb.Daemon.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.InitNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.InitNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.InitNode.displayName = 'proto.store_pb.InitNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.InitNode.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.InitNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.InitNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.InitNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.store_pb.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.InitNode}
 */
proto.store_pb.InitNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.InitNode;
  return proto.store_pb.InitNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.InitNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.InitNode}
 */
proto.store_pb.InitNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.Node;
      reader.readMessage(value,proto.store_pb.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.InitNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.InitNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.InitNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.InitNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.store_pb.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.store_pb.Node}
 */
proto.store_pb.InitNode.prototype.getNode = function() {
  return /** @type{?proto.store_pb.Node} */ (
    jspb.Message.getWrapperField(this, proto.store_pb.Node, 1));
};


/** @param {?proto.store_pb.Node|undefined} value */
proto.store_pb.InitNode.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.store_pb.InitNode.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.store_pb.InitNode.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.AddNodeToGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.AddNodeToGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.AddNodeToGroup.displayName = 'proto.store_pb.AddNodeToGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.AddNodeToGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.AddNodeToGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.AddNodeToGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.AddNodeToGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    suffrage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bootstrap: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.AddNodeToGroup}
 */
proto.store_pb.AddNodeToGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.AddNodeToGroup;
  return proto.store_pb.AddNodeToGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.AddNodeToGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.AddNodeToGroup}
 */
proto.store_pb.AddNodeToGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {!proto.store_pb.Suffrage} */ (reader.readEnum());
      msg.setSuffrage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBootstrap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.AddNodeToGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.AddNodeToGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.AddNodeToGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.AddNodeToGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSuffrage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBootstrap();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string nodeID = 1;
 * @return {string}
 */
proto.store_pb.AddNodeToGroup.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.AddNodeToGroup.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 groupID = 2;
 * @return {number}
 */
proto.store_pb.AddNodeToGroup.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.store_pb.AddNodeToGroup.prototype.setGroupid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Suffrage suffrage = 3;
 * @return {!proto.store_pb.Suffrage}
 */
proto.store_pb.AddNodeToGroup.prototype.getSuffrage = function() {
  return /** @type {!proto.store_pb.Suffrage} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.store_pb.Suffrage} value */
proto.store_pb.AddNodeToGroup.prototype.setSuffrage = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool bootstrap = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.AddNodeToGroup.prototype.getBootstrap = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.store_pb.AddNodeToGroup.prototype.setBootstrap = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.CreateDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.CreateDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.CreateDatabaseRequest.displayName = 'proto.store_pb.CreateDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.CreateDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.CreateDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.CreateDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.CreateDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.CreateDatabaseRequest}
 */
proto.store_pb.CreateDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.CreateDatabaseRequest;
  return proto.store_pb.CreateDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.CreateDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.CreateDatabaseRequest}
 */
proto.store_pb.CreateDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.CreateDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.CreateDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.CreateDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.CreateDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.store_pb.CreateDatabaseRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.CreateDatabaseRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.CreateDatabaseReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.CreateDatabaseReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.CreateDatabaseReply.displayName = 'proto.store_pb.CreateDatabaseReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.CreateDatabaseReply.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.CreateDatabaseReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.CreateDatabaseReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.CreateDatabaseReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.CreateDatabaseReply}
 */
proto.store_pb.CreateDatabaseReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.CreateDatabaseReply;
  return proto.store_pb.CreateDatabaseReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.CreateDatabaseReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.CreateDatabaseReply}
 */
proto.store_pb.CreateDatabaseReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.CreateDatabaseReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.CreateDatabaseReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.CreateDatabaseReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.CreateDatabaseReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxCreateTopic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxCreateTopic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxCreateTopic.displayName = 'proto.store_pb.TxCreateTopic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxCreateTopic.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxCreateTopic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxCreateTopic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateTopic.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roller: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxCreateTopic}
 */
proto.store_pb.TxCreateTopic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxCreateTopic;
  return proto.store_pb.TxCreateTopic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxCreateTopic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxCreateTopic}
 */
proto.store_pb.TxCreateTopic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.store_pb.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoller(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxCreateTopic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxCreateTopic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxCreateTopic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateTopic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRoller();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.store_pb.TxCreateTopic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateTopic.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Level level = 2;
 * @return {!proto.store_pb.Level}
 */
proto.store_pb.TxCreateTopic.prototype.getLevel = function() {
  return /** @type {!proto.store_pb.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.store_pb.Level} value */
proto.store_pb.TxCreateTopic.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string roller = 3;
 * @return {string}
 */
proto.store_pb.TxCreateTopic.prototype.getRoller = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateTopic.prototype.setRoller = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string appID = 4;
 * @return {string}
 */
proto.store_pb.TxCreateTopic.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateTopic.prototype.setAppid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxCreateQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxCreateQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxCreateQueue.displayName = 'proto.store_pb.TxCreateQueue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxCreateQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxCreateQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxCreateQueue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roller: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fifo: jspb.Message.getFieldWithDefault(msg, 5, false),
    maxinflight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxvisibility: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxdelay: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxretries: jspb.Message.getFieldWithDefault(msg, 9, 0),
    appid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxCreateQueue}
 */
proto.store_pb.TxCreateQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxCreateQueue;
  return proto.store_pb.TxCreateQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxCreateQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxCreateQueue}
 */
proto.store_pb.TxCreateQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.store_pb.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoller(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFifo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxinflight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxvisibility(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxdelay(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxretries(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxCreateQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxCreateQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxCreateQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRoller();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFifo();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMaxinflight();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxvisibility();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxdelay();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMaxretries();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.store_pb.TxCreateQueue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateQueue.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Level level = 2;
 * @return {!proto.store_pb.Level}
 */
proto.store_pb.TxCreateQueue.prototype.getLevel = function() {
  return /** @type {!proto.store_pb.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.store_pb.Level} value */
proto.store_pb.TxCreateQueue.prototype.setLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string roller = 3;
 * @return {string}
 */
proto.store_pb.TxCreateQueue.prototype.getRoller = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateQueue.prototype.setRoller = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool fifo = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.store_pb.TxCreateQueue.prototype.getFifo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.store_pb.TxCreateQueue.prototype.setFifo = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 maxInflight = 6;
 * @return {number}
 */
proto.store_pb.TxCreateQueue.prototype.getMaxinflight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.store_pb.TxCreateQueue.prototype.setMaxinflight = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 maxVisibility = 7;
 * @return {number}
 */
proto.store_pb.TxCreateQueue.prototype.getMaxvisibility = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.store_pb.TxCreateQueue.prototype.setMaxvisibility = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 maxDelay = 8;
 * @return {number}
 */
proto.store_pb.TxCreateQueue.prototype.getMaxdelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.store_pb.TxCreateQueue.prototype.setMaxdelay = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 maxRetries = 9;
 * @return {number}
 */
proto.store_pb.TxCreateQueue.prototype.getMaxretries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.store_pb.TxCreateQueue.prototype.setMaxretries = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string appID = 10;
 * @return {string}
 */
proto.store_pb.TxCreateQueue.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.store_pb.TxCreateQueue.prototype.setAppid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxCreateSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxCreateSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxCreateSegment.displayName = 'proto.store_pb.TxCreateSegment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxCreateSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxCreateSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxCreateSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateSegment.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxCreateSegment}
 */
proto.store_pb.TxCreateSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxCreateSegment;
  return proto.store_pb.TxCreateSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxCreateSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxCreateSegment}
 */
proto.store_pb.TxCreateSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxCreateSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxCreateSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxCreateSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxCreateSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxRoll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxRoll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxRoll.displayName = 'proto.store_pb.TxRoll';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxRoll.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxRoll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxRoll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxRoll.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxRoll}
 */
proto.store_pb.TxRoll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxRoll;
  return proto.store_pb.TxRoll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxRoll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxRoll}
 */
proto.store_pb.TxRoll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRollerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxRoll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxRoll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxRoll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxRoll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollerid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 rollerID = 1;
 * @return {number}
 */
proto.store_pb.TxRoll.prototype.getRollerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.store_pb.TxRoll.prototype.setRollerid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxDeleteTopic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxDeleteTopic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxDeleteTopic.displayName = 'proto.store_pb.TxDeleteTopic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxDeleteTopic.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxDeleteTopic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxDeleteTopic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxDeleteTopic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxDeleteTopic}
 */
proto.store_pb.TxDeleteTopic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxDeleteTopic;
  return proto.store_pb.TxDeleteTopic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxDeleteTopic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxDeleteTopic}
 */
proto.store_pb.TxDeleteTopic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxDeleteTopic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxDeleteTopic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxDeleteTopic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxDeleteTopic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxChangeRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.store_pb.TxChangeRing.repeatedFields_, null);
};
goog.inherits(proto.store_pb.TxChangeRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxChangeRing.displayName = 'proto.store_pb.TxChangeRing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.store_pb.TxChangeRing.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxChangeRing.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxChangeRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxChangeRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxChangeRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromList: jspb.Message.toObjectList(msg.getFromList(),
    proto.store_pb.Slice.toObject, includeInstance),
    toList: jspb.Message.toObjectList(msg.getToList(),
    proto.store_pb.Slice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxChangeRing}
 */
proto.store_pb.TxChangeRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxChangeRing;
  return proto.store_pb.TxChangeRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxChangeRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxChangeRing}
 */
proto.store_pb.TxChangeRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.store_pb.Slice;
      reader.readMessage(value,proto.store_pb.Slice.deserializeBinaryFromReader);
      msg.addFrom(value);
      break;
    case 2:
      var value = new proto.store_pb.Slice;
      reader.readMessage(value,proto.store_pb.Slice.deserializeBinaryFromReader);
      msg.addTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxChangeRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxChangeRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxChangeRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxChangeRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.store_pb.Slice.serializeBinaryToWriter
    );
  }
  f = message.getToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.store_pb.Slice.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Slice from = 1;
 * @return {!Array.<!proto.store_pb.Slice>}
 */
proto.store_pb.TxChangeRing.prototype.getFromList = function() {
  return /** @type{!Array.<!proto.store_pb.Slice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.Slice, 1));
};


/** @param {!Array.<!proto.store_pb.Slice>} value */
proto.store_pb.TxChangeRing.prototype.setFromList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.store_pb.Slice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.Slice}
 */
proto.store_pb.TxChangeRing.prototype.addFrom = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.store_pb.Slice, opt_index);
};


proto.store_pb.TxChangeRing.prototype.clearFromList = function() {
  this.setFromList([]);
};


/**
 * repeated Slice to = 2;
 * @return {!Array.<!proto.store_pb.Slice>}
 */
proto.store_pb.TxChangeRing.prototype.getToList = function() {
  return /** @type{!Array.<!proto.store_pb.Slice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.store_pb.Slice, 2));
};


/** @param {!Array.<!proto.store_pb.Slice>} value */
proto.store_pb.TxChangeRing.prototype.setToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.store_pb.Slice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.store_pb.Slice}
 */
proto.store_pb.TxChangeRing.prototype.addTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.store_pb.Slice, opt_index);
};


proto.store_pb.TxChangeRing.prototype.clearToList = function() {
  this.setToList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxChangeRingCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxChangeRingCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxChangeRingCancel.displayName = 'proto.store_pb.TxChangeRingCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxChangeRingCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxChangeRingCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxChangeRingCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxChangeRingCancel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxChangeRingCancel}
 */
proto.store_pb.TxChangeRingCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxChangeRingCancel;
  return proto.store_pb.TxChangeRingCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxChangeRingCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxChangeRingCancel}
 */
proto.store_pb.TxChangeRingCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxChangeRingCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxChangeRingCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxChangeRingCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxChangeRingCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.store_pb.TxSplitTopic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.store_pb.TxSplitTopic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.store_pb.TxSplitTopic.displayName = 'proto.store_pb.TxSplitTopic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.store_pb.TxSplitTopic.prototype.toObject = function(opt_includeInstance) {
  return proto.store_pb.TxSplitTopic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.store_pb.TxSplitTopic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxSplitTopic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.store_pb.TxSplitTopic}
 */
proto.store_pb.TxSplitTopic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.store_pb.TxSplitTopic;
  return proto.store_pb.TxSplitTopic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.store_pb.TxSplitTopic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.store_pb.TxSplitTopic}
 */
proto.store_pb.TxSplitTopic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.store_pb.TxSplitTopic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.store_pb.TxSplitTopic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.store_pb.TxSplitTopic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.store_pb.TxSplitTopic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.store_pb.Level = {
  MISSION: 0,
  BUSINESS: 1,
  BACKGROUND: 2
};

/**
 * @enum {number}
 */
proto.store_pb.Codec = {
  JSON: 0,
  PROTOBUF: 1,
  MSGPACK: 2,
  CBOR: 3
};

/**
 * @enum {number}
 */
proto.store_pb.Suffrage = {
  VOTER: 0,
  NON_VOTER: 1,
  STAGING: 2
};

/**
 * @enum {number}
 */
proto.store_pb.RaftStatus = {
  FOLLOWER: 0,
  CANDIDATE: 1,
  LEADER: 2,
  SHUTDOWN: 3
};

goog.object.extend(exports, proto.store_pb);
